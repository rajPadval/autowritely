import { NextResponse } from "next/server";
import openai from "@/helpers/openai";

let interval; // Declare the interval variable in a global scope

async function generateAndPostBlogForTopic(topic) {
  console.log("Topic:", topic);

  const structure = {
    title: "Title",
    desc: "Description",
  };

  const completion = await openai.createChatCompletion({
    model: "gpt-3.5-turbo",
    messages: [
      {
        role: "system",
        content:
          "Pretend you're a content writer, be energetic and full of charisma. Make the content easy for the viewer to understand, also include some lines of humour in the content",
      },
      {
        role: "user",
        content: `generate a blog on the topic ${topic} with the following attributes : 
        - title
        - description (this should be greater than 100 words)
        Format the response properly in the following JSON object : ${JSON.stringify(
          structure
        )}
        `,
      },
    ],
    max_tokens: 200,
  });

  if (!completion?.data?.choices?.[0]?.message?.content) {
    throw new Error("No content generated by GPT-3");
  }

  let response;
  // Extract the generated response from GPT-3
  try {
    response = JSON.parse(completion.data.choices[0].message.content);
    structure.title = response.title;
    structure.desc = response.desc;
    try {
      const postRes = await fetch("http://localhost:3000/api/postBlogs", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(structure),
      });

      const successMsg = await postRes.json();
      console.log("Blog generated and posted:", successMsg);
    } catch (error) {
      console.log("Error posting blog:", error);
    }
  } catch (parseError) {
    console.error("Error parsing JSON:", parseError);
    console.log(
      "Response Content:",
      completion.data.choices[0].message.content
    );
  }
}

export async function POST(request) {
  try {
    const reqBody = await request.json();
    const { topics } = reqBody;

    console.log("Topics:", topics);

    if (interval) {
      clearInterval(interval); // Clear the previous interval if it exists
    }

    interval = setInterval(() => {
      topics.forEach((topic) => {
        generateAndPostBlogForTopic(topic);
      });
    }, 1 * 60 * 1000); // Run every 5 minutes

    return NextResponse.json({ message: "Blog generation scheduled" });
  } catch (error) {
    console.error("Error scheduling blog generation:", error);
    return NextResponse.json({ error: "Internal server error" });
  }
}
